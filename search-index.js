var searchIndex = JSON.parse('{\
"tlsn_core":{"doc":"TLSNotary core protocol library.","t":"CNCCENNCECCECCLLLLLLLLLLLLLLALLLLLLLLLLLLLLALLLLLLLLLLLLLLLAAALLLALLLLALLLLLLLLLLLLLNNNEDDEENNNNNDEDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFFFFFFFFFFFFDFLLMMLLMLLMLLMLLMMMLMMFLLLLENDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDNENLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLNNNNNNNNDDDEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDENNDNDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Direction","Dns","HandshakeSummary","NotarizedSession","NotaryPublicKey","P256","P256","RedactedTranscript","ServerName","SessionData","SessionHeader","Signature","Transcript","TranscriptSlice","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commitment","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","fixtures","fmt","fmt","fmt","from","from","from","from","from","hash","init","init","init","into","into","into","merkle","msg","proof","serialize","serialize","serialize","session","to_bytes","to_owned","to_owned","to_owned","transcript","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Blake3","Blake3","Blake3","Commitment","CommitmentId","CommitmentInfo","CommitmentKind","CommitmentOpening","Duplicate","EmptyRange","MissingEncodings","NoCommitments","RangeOutOfBounds","TranscriptCommitmentBuilder","TranscriptCommitmentBuilderError","TranscriptCommitments","blake3","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit_recv","commit_sent","data","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direction","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get_id","get_id_by_info","get_info","hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_data","kind","kind","kind","merkle_root","merkle_tree","partial_cmp","ranges","recover","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Blake3Commitment","Blake3Opening","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","hash","init","init","into","into","into_data","new","nonce","open","recover","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","cert","client_random","encoder","encoder_seed","encoding_provider","handshake_commitment","handshake_data","handshake_summary","notary_signing_key","server_cert_details","server_ephemeral_key","server_kx_details","server_random","session_header","TestData","appliedzkp","borrow","borrow_mut","ca","cr","deref","deref_mut","dns_name","drop","dss","ee","from","init","inter","into","kx_params","pubkey","sig","sig_scheme","signature_msg","sr","time","tlsnotary","try_from","try_into","type_id","vzip","MerkleError","MerkleNoLeavesProvided","MerkleProof","MerkleProofVerificationFailed","MerkleRoot","MerkleTree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from","from_leaves","init","init","init","init","into","into","into","into","proof","root","serialize","serialize","serialize","to_inner","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","SessionHeader","SignedSessionHeader","SignedSessionHeader","TlsnMessage","TranscriptCommitmentRoot","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","header","init","init","into","into","serialize","serialize","signature","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DuplicateCommitmentId","DuplicateData","InvalidCommitmentId","InvalidCommitmentType","InvalidInclusionProof","InvalidOpening","MaxDataExceeded","RangeOutOfBounds","SessionProof","SubstringsProof","SubstringsProofBuilder","SubstringsProofBuilderError","SubstringsProofError","TlsProof","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handshake_data_decommitment","header","init","init","init","init","init","init","into","into","into","into","into","into","new","reveal","serialize","serialize","serialize","server_name","session","signature","substrings","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_with_default_cert_verifier","vzip","vzip","vzip","vzip","vzip","vzip","Commitment","HandshakeSummary","HandshakeVerifyError","InconsistentHeader","KxParams","NotarizedSession","ServerEphemKey","SessionData","SessionHeader","SessionHeaderVerifyError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_substrings_proof","clone","clone","clone_into","clone_into","commitments","data","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","encoder","encoder_seed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handshake_commitment","handshake_data_decommitment","handshake_summary","header","init","init","init","init","init","init","into","into","into","into","into","into","merkle_root","new","new","new","new","recv_len","recv_transcript","sent_len","sent_transcript","serialize","serialize","serialize","serialize","server_name","server_public_key","session_proof","signature","time","time","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","Direction","Received","RedactedTranscript","Sent","Transcript","TranscriptSlice","authed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","data","data","data","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","get_value_ids","hash","init","init","init","init","into","into","into","into","into_bytes","new","new","range","redacted","serialize","serialize","set_redacted","set_redacted_range","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"tlsn_core"],[84,"tlsn_core::commitment"],[266,"tlsn_core::commitment::blake3"],[310,"tlsn_core::fixtures"],[324,"tlsn_core::fixtures::cert"],[352,"tlsn_core::merkle"],[435,"tlsn_core::msg"],[472,"tlsn_core::proof"],[586,"tlsn_core::session"],[718,"tlsn_core::transcript"],[807,"core::result"],[808,"serde::de"],[809,"core::fmt"],[810,"core::fmt"],[811,"p256::ecdsa"],[812,"core::hash"],[813,"serde::ser"],[814,"alloc::vec"],[815,"core::any"],[816,"core::convert"],[817,"core::cmp"],[818,"utils::range"],[819,"core::fmt"],[820,"mpz_core::hash"],[821,"mpz_garble_core::encoding::state"],[822,"mpz_garble_core::encoding::value"],[823,"alloc::string"],[824,"mpz_garble_core::encoding::state"],[825,"tls_core::msgs::handshake"],[826,"mpz_garble_core::encoding::encoder"],[827,"core::ops::function"],[828,"alloc::boxed"],[829,"tls_core::handshake"],[830,"p256::ecdsa"],[831,"tls_core::key"],[832,"tls_core::ke"],[833,"tls_core::msgs::handshake"],[834,"mpz_core::commit"],[835,"core::iter::traits::iterator"],[836,"core::ops::range"]],"d":["","A DNS name.","","","A Notary public key.","A NIST P-256 public key.","A secp256r1 signature.","","A Server’s name.","","","A Notary signature.","","","","Returns a reference to the server name as a string slice.","","","","","","","","","","","","","Types related to transcript commitments.","","","","","","","","","","","","","","","Fixtures for testing","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Merkle tree types.","Protocol message types.","Different types of proofs used in the TLSNotary protocol.","","","","TLS session types.","Returns the bytes of this signature.","","","","Transcript data types.","","","","","","","","","","Verifies the signature.","","","","A BLAKE3 commitment to encodings of the transcript.","A BLAKE3 commitment to encodings of the transcript.","An opening to a BLAKE3 commitment","A commitment to some bytes in a transcript","A commitment id.","Info of a transcript commitment","The kind of a <code>Commitment</code>.","An opening to a commitment to the transcript.","Duplicate commitment","Empty range","Failed to retrieve encodings for the provided transcript …","No commitments were added","Range out of bounds","A builder for <code>TranscriptCommitments</code>.","An error for <code>TranscriptCommitmentBuilder</code>","A collection of transcript commitments.","BLAKE3 commitments.","","","","","","","","","","","","","","","","","Builds the <code>TranscriptCommitments</code>","","","","","","","","","","","","","","Commits to the provided ranges of the <code>received</code> transcript.","Commits to the provided ranges of the <code>sent</code> transcript.","Returns the transcript data corresponding to this opening","","","","","","","","","","","","","","","","","","","","","","","Returns the direction of this commitment","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a commitment if it exists.","Gets the commitment id for the provided commitment info.","Returns the commitment id for a commitment with the given …","Returns commitment info, if it exists.","","","Returns the hash of this commitment","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the transcript data corresponding to this opening","Returns the kind of this commitment","Returns the kind of this commitment","Returns the kind of this opening","Returns the merkle root of the commitments.","Returns the merkle tree of the commitments.","","Returns the ranges of this commitment","Recovers the expected commitment from this opening.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Blake3 commitment to the encodings of the substrings of …","A substring opening using Blake3","","","","","","","","","Returns the transcript data corresponding to this opening","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the hash of this commitment","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the transcript data corresponding to this opening","Creates a new Blake3 commitment","Returns the nonce of this commitment","Opens this commitment","Recovers the expected commitment from this opening.","","","","","","","","","","","","","Certificate fixtures","Returns a client random fixture.","Returns an encoder fixture.","Returns an encoder seed fixture.","Returns an encoding provider fixture using the given …","Returns a handshake commitment fixture.","Returns a handshake data fixture.","Returns a handshake summary fixture.","Returns a notary signing key fixture.","Returns a server certificate details fixture.","Returns a server ephemeral key fixture.","Returns a server key exchange details fixture.","Returns a server random fixture.","Returns a session header fixture using the given …","Collects data needed for testing","Returns test data for the appliedzkp.org website","","","CA cert","client random","","","DNS name of the website","","Returns the DigitallySignedStruct","end-entity cert","Returns the argument unchanged.","","intermediate cert","Calls <code>U::from(self)</code>.","Returns the ServerECDHParams in encoded form","server ephemeral P256 pubkey","server signature over the key exchange parameters","algorithm used to create the sig","Returns the client random + server random + kx params in …","server random","unix time when TLS handshake began","Returns test data for the tlsnotary.org website","","","","","Errors that can occur during operations with Merkle tree …","","A Merkle proof.","","A Merkle root.","A Merkle tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new Merkle tree from the given <code>leaves</code>","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an inclusion proof for the given <code>indices</code>","Returns the Merkle root for this MerkleTree","","","","Returns the inner byte array","","","","","","","","","","","","","","","","","Checks if indices, hashes and leaves count are valid for …","","","","","A session header.","A signed session header.","A session header signed by a notary.","Top-level enum for all messages","A Merkle root for the tree of commitments to the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The session header","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The notary’s signature","","","","","","","","","Attempted to add a commitment with a duplicate id.","The proof contains duplicate transcript data.","Invalid commitment id.","Invalid commitment type.","The proof contains an invalid inclusion proof.","The proof contains an invalid commitment opening.","The proof contains more data than the maximum allowed.","Range of the opening is out of bounds.","Proof of the TLS handshake, server identity, and …","A substring proof containing the commitment openings and a …","A builder for <code>SubstringsProof</code>","An error for <code>SubstringsProofBuilder</code>","An error relating to <code>SubstringsProof</code>","Proof that a transcript of communications took place …","","","","","","","","","","","","","Builds the <code>SubstringsProof</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decommitment to the TLS handshake and server identity.","The session header","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new builder.","Reveals data corresponding to the provided commitment id","","","","The server name.","Proof of the TLS handshake, server identity, and …","Signature for the session header, if the notary signed it","Proof regarding the contents of the transcript.","","","","","","","","","","","","","","","","","","","","","Verifies this proof and, if successful, returns the …","Verify the session proof, returning the server’s name.","Verify the session proof using trust anchors from the …","","","","","","","The handshake data does not match the commitment","Handshake summary is part of the session header signed by …","An error that can occur while verifying a handshake summary","The session header is not consistent with the provided data","The key exchange parameters are invalid","A validated notarized session stored by the Prover","The server ephemeral key does not match","Notarized session data.","An authentic session header from the Notary","An error that can occur while verifying a session header","","","","","","","","","","","","","Returns a substrings proof builder.","","","","","Returns the transcript commitments.","Returns the SessionData","","","","","","","","","","","","","","","","","","","","","","","Create a new ChaChaEncoder from encoder_seed","Returns the seed used to generate plaintext encodings","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns commitment to the handshake data","Returns the decommitment to handshake data","Returns the HandshakeSummary of the TLS session between …","Returns the SessionHeader","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the merkle_root of the merkle tree of the prover’…","Creates new session data.","Creates a new HandshakeSummary","Create a new instance of SessionHeader","Create a new notarized session.","Returns the number of bytes received by the server","Returns the transcript for data received from the server","Returns the number of bytes sent to the server","Returns the transcript for data sent to the server","","","","","Returns the server name.","Returns the server ephemeral public key","Returns a proof of the TLS session","Returns the signature for the session header, if the …","Time of the TLS session, in seconds since the UNIX epoch.","Time of the TLS session, in seconds since the UNIX epoch.","","","","","","","","","","","","","","","","","","","","","","","Verifies that the provided handshake data matches this …","Verify the data in the header is consistent with the Prover…","","","","","","","The direction of data communicated over a TLS connection.","Received by the prover from the server","A transcript which may have some data redacted.","Sent from the prover to the server","A transcript contains a subset of bytes from a TLS session","Slice of a transcript.","Returns all the ranges of data which have been …","","","","","","","","","","","","","","","Returns the actual traffic data of this transcript","Returns a reference to the data.","Returns the bytes of this slice","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the value ID for each byte in the provided range …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the bytes of this slice","Creates a new transcript with the given ID and data","Creates a new redacted transcript with the given length.","Returns the range of bytes this slice refers to in the …","Returns all the ranges of data which have been redacted.","","","Sets all bytes in the transcript which were redacted.","Sets all bytes in the transcript which were redacted in …","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,3,4,0,0,0,0,0,0,0,1,1,3,4,1,3,4,1,3,4,1,3,4,1,0,3,4,1,3,4,1,3,4,1,3,4,1,1,1,0,3,4,1,3,3,4,4,1,1,3,4,1,3,4,1,0,0,0,3,4,1,0,4,3,4,1,0,3,4,1,3,4,1,3,4,1,4,3,4,1,26,27,28,0,0,0,0,0,23,23,23,23,23,0,0,0,0,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,21,24,25,26,27,28,22,24,25,26,27,28,22,24,21,21,28,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,24,25,26,27,28,22,25,21,23,24,25,26,27,28,22,24,25,27,24,25,27,21,23,23,24,25,27,22,21,23,24,25,26,26,27,28,28,22,22,21,22,22,24,25,26,27,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,28,25,26,28,22,22,24,25,28,24,25,26,27,28,22,24,25,26,27,28,22,23,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,21,23,24,25,26,27,28,22,0,0,33,34,33,34,33,34,33,34,34,33,34,33,34,33,34,33,34,33,33,34,33,33,34,33,34,34,33,33,33,34,33,34,33,34,33,34,33,34,33,34,33,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,56,56,56,56,0,59,0,59,0,0,37,59,58,38,37,59,58,38,37,58,38,37,58,38,38,37,59,58,38,37,59,58,38,37,58,38,37,59,58,38,37,59,37,37,59,59,37,37,59,58,38,38,37,59,58,38,37,59,58,38,38,38,37,58,38,37,37,58,38,59,37,59,58,38,37,59,58,38,37,59,58,38,58,37,59,58,38,60,0,60,0,60,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,61,60,61,60,61,60,61,61,60,61,60,61,60,61,60,61,64,67,64,64,67,67,67,67,0,0,0,0,0,0,62,64,67,63,65,66,62,64,67,63,65,66,62,62,64,67,63,65,66,62,64,67,63,65,66,63,65,66,62,64,67,63,65,66,62,64,64,67,67,63,65,66,62,64,67,63,65,66,66,66,62,64,67,63,65,66,62,64,67,63,65,66,62,62,63,65,66,66,65,66,65,64,67,62,64,67,63,65,66,62,64,67,63,65,66,62,64,67,63,65,66,63,66,66,62,64,67,63,65,66,73,0,0,74,73,0,73,0,0,0,71,73,50,74,55,72,71,73,50,74,55,72,71,50,55,50,55,71,72,71,73,50,74,55,72,71,73,50,74,55,72,71,50,55,72,71,73,50,74,55,72,55,55,71,73,73,50,74,74,55,72,71,73,50,74,55,72,50,71,55,72,71,73,50,74,55,72,71,73,50,74,55,72,55,71,50,55,72,55,71,55,71,71,50,55,72,71,50,72,72,50,55,50,55,73,74,71,73,50,74,55,72,71,73,50,74,55,72,71,73,50,74,55,72,50,55,71,73,50,74,55,72,0,31,0,31,0,0,69,68,69,77,31,68,69,77,31,68,77,31,68,77,31,68,69,77,68,77,68,69,77,31,68,69,77,31,68,31,68,69,77,31,77,31,31,68,69,77,31,68,69,77,31,0,31,68,69,77,31,68,69,77,31,77,68,69,77,69,68,31,69,69,68,77,31,68,69,77,31,68,69,77,31,68,69,77,31,68,69,77,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[4,4],[1,1],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[3]]],8],[-1,[[7,[4]]],8],[-1,[[7,[1]]],8],[6,5],[6,5],[6,5],[[1,1],9],[[-1,-2],9,[],[]],0,[[3,10],11],[[4,10],11],[[1,10],11],[12,3],[-1,-1,[]],[13,4],[-1,-1,[]],[-1,-1,[]],[[1,-1],5,14],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[3,-1],7,15],[[4,-1],7,15],[[1,-1],7,15],0,[4,[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[4,[19,[16]],-1],[[7,[5,0]]],[[20,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[7,[22,23]]]],[24,24],[25,25],[26,26],[27,27],[28,28],[22,22],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[24,24],29],[[21,-1],[[7,[24,23]]],[[20,[[30,[6]]]]]],[[21,-1],[[7,[24,23]]],[[20,[[30,[6]]]]]],[28,[[19,[16]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[24]]],8],[-1,[[7,[25]]],8],[-1,[[7,[26]]],8],[-1,[[7,[27]]],8],[-1,[[7,[28]]],8],[-1,[[7,[22]]],8],[25,31],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[[24,24],9],[[25,25],9],[[27,27],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[21,10],[[7,[5,32]]]],[[23,10],11],[[23,10],11],[[24,10],11],[[25,10],11],[[27,10],11],[[22,10],[[7,[5,32]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[33,26],[-1,-1,[]],[34,28],[-1,-1,[]],[-1,-1,[]],[[22,24],[[35,[26]]]],[[21,27,-1,31],[[35,[24]]],[[20,[[30,[6]]]]]],[[22,27,[30,[6]],31],[[35,[24]]]],[[22,24],[[35,[25]]]],[[24,-1],5,14],[[25,-1],5,14],[26,36],[[27,-1],5,14],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[17,[16]]]],[25,27],[26,27],[28,27],[22,37],[22,38],[[24,24],[[35,[29]]]],[25,[[30,[6]]]],[[28,[19,[[40,[39]]]]],26],[[24,-1],7,15],[[25,-1],7,15],[[26,-1],7,15],[[27,-1],7,15],[[28,-1],7,15],[[22,-1],7,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,41,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[34,34],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[34,[[19,[16]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[33]]],8],[-1,[[7,[34]]],8],[6,5],[6,5],[[33,10],[[7,[5,32]]]],[-1,-1,[]],[-1,-1,[]],[33,36],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[34,[[17,[16]]]],[[[19,[[40,[42]]]]],33],[33,43],[[33,[17,[16]]],34],[[34,[19,[[40,[39]]]]],33],[[33,-1],7,15],[[34,-1],7,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],44],[[],45],[[],[[46,[16]]]],[[[19,[16]],[19,[16]]],[[48,[47]]]],[[],36],[[],49],[[],50],[[],51],[[],52],[[],53],[[],54],[[],44],[[37,6,6],55],0,[[],56],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[6,-1,[]],[6,-1,[]],0,[6,5],[56,57],0,[-1,-1,[]],[[],6],0,[-1,-2,[],[]],[56,[[17,[16]]]],0,0,0,[56,[[17,[16]]]],0,0,[[],56],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[58,58],[38,38],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],38],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[37]]],8],[-1,[[7,[58]]],8],[-1,[[7,[38]]],8],[6,5],[6,5],[6,5],[6,5],[[37,37],9],[[59,59],9],[[-1,-2],9,[],[]],[[37,10],11],[[59,10],11],[[59,10],11],[-1,-1,[]],[[[46,[16]]],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[19,[36]]],[[7,[38,59]]]],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,[19,[6]]],58],[38,37],[[37,-1],7,15],[[58,-1],7,15],[[38,-1],7,15],[37,[[46,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,41,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[58,37,[19,[6]],[19,[36]]],[[7,[5,59]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[60]]],8],[-1,[[7,[61]]],8],[6,5],[6,5],[[60,10],11],[[61,10],11],[-1,-1,[]],[-1,-1,[]],0,[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[60,-1],7,15],[[61,-1],7,15],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[62,[[7,[63,64]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[63]]],8],[-1,[[7,[65]]],8],[-1,[[7,[66]]],8],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[[62,10],[[7,[5,32]]]],[[64,10],11],[[64,10],11],[[67,10],11],[[67,10],11],[[63,10],[[7,[5,32]]]],[[65,10],11],[[66,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[22,68,68],62],[[62,24],[[7,[62,64]]]],[[63,-1],7,15],[[65,-1],7,15],[[66,-1],7,15],0,0,0,0,[-1,41,[]],[-1,41,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[63,55],[[7,[[5,[69,69]],67]]]],[[66,-1,-2],[[7,[5,0]]],[[20,[3]]],70],[[66,-1],[[7,[5,0]]],[[20,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,62],[50,50],[55,55],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[71,22],[72,71],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[71]]],8],[-1,[[7,[50]]],8],[-1,[[7,[55]]],8],[-1,[[7,[72]]],8],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[55,45],[55,[[46,[16]]]],[[71,10],[[7,[5,32]]]],[[73,10],11],[[73,10],11],[[50,10],11],[[74,10],11],[[74,10],11],[[55,10],11],[[72,10],[[7,[5,32]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[50,36],[71,[[75,[49]]]],[55,50],[72,55],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,37],[[1,[75,[49]],68,68,22],71],[[76,53,36],50],[[[46,[16]],37,6,6,50],55],[[55,[35,[4]],71],72],[55,6],[71,68],[55,6],[71,68],[[71,-1],7,15],[[50,-1],7,15],[[55,-1],7,15],[[72,-1],7,15],[71,1],[50,53],[72,66],[72,[[35,[4]]]],[50,76],[55,76],[-1,-2,[],[]],[-1,-2,[],[]],[-1,41,[]],[-1,41,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[50,[75,[49]]],[[7,[5,73]]]],[[55,76,53,37,[46,[16]],[75,[49]]],[[7,[5,74]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[69,[[30,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[68,68],[77,77],[31,31],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[68,78],[69,[[19,[16]]]],[77,[[19,[16]]]],[[],68],[[],77],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[68]]],8],[-1,[[7,[31]]],8],[6,5],[6,5],[6,5],[6,5],[[77,77],9],[[31,31],9],[[-1,-2],9,[],[]],[[68,10],11],[[69,10],11],[[77,10],11],[[31,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[30,[6]],31],[[0,[79]]]],[[31,-1],5,14],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,[[17,[16]]]],[-1,68,[[20,[78]]]],[[6,[17,[77]]],69],[77,[[80,[6]]]],[69,[[30,[6]]]],[[68,-1],7,15],[[31,-1],7,15],[[69,16],5],[[69,16,[80,[6]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[4,"ServerName",0],[15,"str"],[4,"NotaryPublicKey",0],[4,"Signature",0],[15,"tuple"],[15,"usize"],[4,"Result",807],[8,"Deserializer",808],[15,"bool"],[3,"Formatter",809],[6,"Result",809],[6,"PublicKey",810],[6,"Signature",811],[8,"Hasher",812],[8,"Serializer",813],[15,"u8"],[3,"Vec",814],[3,"TypeId",815],[15,"slice"],[8,"Into",816],[3,"TranscriptCommitmentBuilder",84],[3,"TranscriptCommitments",84],[4,"TranscriptCommitmentBuilderError",84],[3,"CommitmentId",84],[3,"CommitmentInfo",84],[4,"Commitment",84],[4,"CommitmentKind",84],[4,"CommitmentOpening",84],[4,"Ordering",817],[3,"RangeSet",818],[4,"Direction",718],[3,"Error",809],[3,"Blake3Commitment",266],[3,"Blake3Opening",266],[4,"Option",819],[3,"Hash",820],[3,"MerkleRoot",352],[3,"MerkleTree",352],[3,"Full",821],[4,"EncodedValue",822],[3,"String",823],[3,"Active",821],[3,"Nonce",824],[3,"Random",825],[3,"ChaChaEncoder",826],[15,"array"],[8,"Fn",827],[3,"Box",828],[3,"HandshakeData",829],[3,"HandshakeSummary",586],[6,"SigningKey",811],[3,"ServerCertDetails",830],[3,"PublicKey",831],[3,"ServerKxDetails",832],[3,"SessionHeader",586],[3,"TestData",324],[3,"DigitallySignedStruct",825],[3,"MerkleProof",352],[4,"MerkleError",352],[4,"TlsnMessage",435],[3,"SignedSessionHeader",435],[3,"SubstringsProofBuilder",472],[3,"SubstringsProof",472],[4,"SubstringsProofBuilderError",472],[3,"TlsProof",472],[3,"SessionProof",472],[4,"SubstringsProofError",472],[3,"Transcript",718],[3,"RedactedTranscript",718],[8,"ServerCertVerifier",833],[3,"SessionData",586],[3,"NotarizedSession",586],[4,"HandshakeVerifyError",586],[4,"SessionHeaderVerifyError",586],[3,"Decommitment",824],[15,"u64"],[3,"TranscriptSlice",718],[3,"Bytes",834],[8,"Iterator",835],[3,"Range",836]]},\
"tlsn_prover":{"doc":"The prover library","t":"AANNNNNDEDEDEDDNDDEDENNNNNDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNDDDEEDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["http","tls","Body","Body","Commitment","Commitment","Commitment","HttpCommitmentBuilder","HttpCommitmentBuilderError","HttpProofBuilder","HttpProofBuilderError","HttpProver","HttpProverError","HttpRequestCommitmentBuilder","HttpResponseCommitmentBuilder","InvalidPath","JsonBody","JsonCommitmentBuilder","JsonCommitmentBuilderError","JsonProofBuilder","JsonProofBuilderError","MissingCommitment","MissingCommitment","MissingHeader","MissingHeader","MissingValue","NotarizedHttpSession","Parse","Proof","Proof","Prover","all","all","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","clone","clone_into","commit","commitment_builder","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","headers","headers","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","path","path","path","proof_builder","request","request","response","response","serialize","serialize","session","session_proof","source","source","source","source","source","start_notarize","state","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Closed","Notarize","State","borrow","borrow","borrow_mut","borrow_mut","compat","compat","compat_mut","compat_mut","compat_ref","compat_ref","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AsyncClientError","CommitmentBuilder","CommitmentError","IOError","InvalidServerName","MpcError","MuxerError","NotarizationError","Prover","ProverConfig","ProverConfigBuilder","ProverConfigBuilderError","ProverError","ProverFuture","ServerNoCloseNotify","TlsClientError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","commitment_builder","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","connect","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","finalize","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","id","init","init","init","init","init","init","into","into","into","into","into","into","into_future","max_transcript_size","max_transcript_size","new","poll","recv_transcript","recv_transcript","root_cert_store","sent_transcript","sent_transcript","server_dns","server_dns","setup","source","start_notarize","state","to_http","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Closed","Initialized","Notarize","ProverState","Setup","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"tlsn_prover"],[2,"tlsn_prover::http"],[316,"tlsn_prover::http::state"],[349,"tlsn_prover::tls"],[509,"tlsn_prover::tls::state"],[579,"tlsn_core::commitment"],[580,"core::result"],[581,"tlsn_formats::http::body"],[582,"core::option"],[583,"tlsn_core::proof::substrings"],[584,"utils_aio::executor"],[585,"serde::de"],[586,"core::fmt"],[587,"core::fmt"],[588,"tlsn_core::commitment::builder"],[589,"tlsn_core::proof::substrings"],[590,"alloc::alloc"],[591,"alloc::vec"],[592,"tlsn_formats::http::proof"],[593,"tlsn_formats::http::proof"],[594,"tlsn_core::session"],[595,"tlsn_core::proof::tls"],[596,"core::error"],[597,"core::any"],[598,"tlsn_core::commitment::builder"],[599,"futures_io::if_std"],[600,"futures_io::if_std"],[601,"core::marker"],[602,"std::io::error"],[603,"tls_client_async"],[604,"mpz_ot::actor::kos::error"],[605,"tls_client::error"],[606,"mpz_ot::actor::kos::error"],[607,"tlsn_core::merkle"],[608,"tls_mpc::error"],[609,"utils_aio::mux"],[610,"mpz_ot"],[611,"core::convert"],[612,"core::pin"],[613,"core::task::wake"],[614,"core::task::poll"],[615,"tlsn_core::transcript"],[616,"tls_core::anchors"]],"d":["HTTP Prover.","TLS prover.","Body commitment error.","Body proof error.","Commitment error.","Transcript commitment builder error.","Transcript commitment builder error.","Builder for commitments to data in an HTTP connection.","HTTP commitment builder error.","Builder for proofs of data in an HTTP connection.","HTTP proof builder error.","An HTTP prover.","HTTP prover error.","Builder for commitments to an HTTP request.","Builder for commitments to an HTTP response.","Invalid path.","A JSON body","Builder for commitments to a JSON value.","JSON commitment builder error.","Builder for proofs of a JSON value.","JSON proof builder error.","Missing commitment for value.","Missing commitment.","Header is missing.","Header is missing.","Missing value","A notarized HTTP session.","An error occurred while parsing the HTTP data.","Substrings proof builder error.","Substrings proof builder error.","An error originated from the TLS prover.","Commits to the entire JSON value.","Proves the entire JSON value.","Returns a commitment builder for the request body if it …","Returns a commitment builder for the response body if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds commitments to the HTTP requests and responses.","Finishes building the request commitment.","Finishes building the response commitment.","Builds the HTTP transcript proof.","Finishes building commitments the a JSON value.","Finishes building the JSON proof.","","","Generates commitments to the HTTP session prior to …","Returns a commitment builder for the HTTP session.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finalizes the HTTP session.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Commits the value of the header with the given name.","Commits the value of the header with the given name.","Commits all request headers.","Commits all response headers.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new HTTP prover.","Commits to the path of the request.","Commits to the value at the given path.","Proves the value at the given path.","Returns a proof builder for the HTTP session.","Returns a commitment builder for the request at the given …","Returns a proof builder for the given request, if it …","Returns a commitment builder for the response at the given …","Returns a proof builder for the given response, if it …","","","Returns the notarized TLS session.","Returns a proof for the TLS session.","","","","","","Starts notarization of the HTTP session.","HTTP prover state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connection closed state.","Notarizing state.","The state of an HTTP prover","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A prover instance.","Configuration for the prover","Builder for <code>ProverConfig</code>.","Error type for ProverConfigBuilder","An error that can occur during proving.","Prover future which must be polled for the TLS connection …","","","Uninitialized field","Custom validation error","","","","","","","","","","","","","Builds a new <code>ProverConfig</code>.","Create a new builder for <code>ProverConfig</code>.","","","","","Returns the transcript commitment builder","","","","","","","","","","","","","","","","","","","Connects to the server using the provided socket.","","","","","","","","","","","","","","","","","","","","Finalize the notarization returning a <code>NotarizedSession</code>","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Id of the notarization session.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the maximum transcript size in bytes.","Maximum transcript size in bytes","Creates a new prover.","","Returns the transcript of the received responses","Returns the transcript of the received responses","TLS root certificate store.","Returns the transcript of the sent requests","Returns the transcript of the sent requests","Returns the server DNS name.","The server DNS name.","Set up the prover.","","Starts notarization of the TLS session.","TLS prover states.","Creates an HTTP prover.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","State after the TLS connection has been closed.","Entry state","Notarizing state.","","State after MPC setup has completed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,13,16,20,13,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,16,7,13,16,7,0,20,16,7,20,1,5,8,11,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,12,8,11,14,1,5,17,17,19,19,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,23,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,17,17,17,19,20,20,13,13,12,8,11,16,16,14,23,3,3,1,7,7,5,17,19,20,20,20,20,13,13,12,8,11,16,16,14,23,3,3,1,7,7,5,17,8,11,8,11,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,8,1,5,23,12,14,12,14,23,17,23,23,20,13,16,3,7,19,0,17,20,13,16,3,7,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,19,20,13,12,8,11,16,14,23,3,1,7,5,17,0,0,0,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,39,18,29,29,29,29,29,29,29,29,0,0,0,0,0,0,29,29,49,49,54,48,47,49,29,38,54,48,47,49,29,38,47,48,48,47,48,47,38,54,48,47,49,29,38,54,48,47,49,29,38,54,48,47,49,29,38,38,47,54,48,47,49,29,38,54,48,47,49,29,38,54,48,47,49,29,38,38,48,49,49,29,29,38,54,48,47,49,49,49,29,29,29,29,29,29,29,29,29,29,29,29,38,47,54,48,47,49,29,38,54,48,47,49,29,38,54,48,47,38,54,38,38,47,38,38,48,47,38,29,38,0,38,48,47,49,29,54,48,47,49,29,38,54,48,47,49,29,38,54,54,48,47,49,29,38,54,48,47,49,29,38,0,0,0,0,0,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50,73,52,37,50],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[5,[[4,[6,7]]]],[8,[[10,[9]]]],[11,[[10,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[4,[6,13]]]],[8,[[4,[6,13]]]],[11,[[4,[6,13]]]],[14,[[4,[15,16]]]],[1,[[4,[6,3]]]],[5,[[4,[6,7]]]],[17,17],[[-1,-2],6,[],[]],[[[19,[18]]],[[4,[6,20]]]],[[[19,[18]]],12],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[-1,[[4,[23]]],24],[-1,[[4,[17]]],24],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[[17,17],25],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[[19,[18]]],[[4,[23,20]]]],[[20,26],27],[[20,26],27],[[13,26],[[4,[6,28]]]],[[13,26],[[4,[6,28]]]],[[12,26],[[4,[6,28]]]],[[8,26],[[4,[6,28]]]],[[11,26],[[4,[6,28]]]],[[16,26],[[4,[6,28]]]],[[16,26],[[4,[6,28]]]],[[14,26],[[4,[6,28]]]],[[23,26],[[4,[6,28]]]],[[3,26],[[4,[6,28]]]],[[3,26],[[4,[6,28]]]],[[1,26],[[4,[6,28]]]],[[7,26],[[4,[6,28]]]],[[7,26],[[4,[6,28]]]],[[5,26],[[4,[6,28]]]],[[17,26],[[4,[6,28]]]],[-1,-1,[]],[29,20],[30,20],[13,20],[-1,-1,[]],[31,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,16],[-1,-1,[]],[-1,-1,[]],[31,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,7],[-1,-1,[]],[-1,-1,[]],[[8,33],[[4,[2,13]]]],[[11,33],[[4,[2,13]]]],[8,[[4,[[36,[[6,[34,2]],35]],13]]]],[11,[[4,[[36,[[6,[34,2]],35]],13]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[37]]],[[4,[[19,[39]],20]]]],[8,[[4,[2,13]]]],[[1,33],[[4,[2,3]]]],[[5,33],[[4,[6,7]]]],[23,14],[[12,22],[[10,[8]]]],[[14,22],[[10,[40]]]],[[12,22],[[10,[11]]]],[[14,22],[[10,[41]]]],[[23,-1],4,42],[[17,-1],4,42],[23,43],[23,44],[20,[[10,[45]]]],[13,[[10,[45]]]],[16,[[10,[45]]]],[3,[[10,[45]]]],[7,[[10,[45]]]],[[[19,[39]]],[[19,[18]]]],0,[-1,-2,[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,6],[22,6],[-1,-1,[]],[-1,-1,[]],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,[[4,[48,49]]]],[[],47],[48,48],[47,47],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[38,[50]]],51],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[[[38,[52]],-1],[[4,[[6,[53,54]],29]]],[55,56,57,58]],[[],47],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,6],[22,6],[22,6],[22,6],[22,6],[22,6],[[[38,[50]]],[[4,[43,29]]]],[[48,26],27],[[49,26],27],[[49,26],27],[[29,26],27],[[29,26],27],[[[38,[-1]],26],27,[59,60]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[61,49],[34,49],[-1,-1,[]],[62,29],[63,29],[64,29],[65,29],[66,29],[67,29],[31,29],[68,29],[69,29],[70,29],[71,29],[-1,-1,[]],[[47,-1],47,[[72,[34]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[48,22],[[47,22],47],[48,[[38,[73]]]],[[[74,[54]],75],76],[[[38,[50]]],77],[[[38,[37]]],77],[[47,78],47],[[[38,[50]]],77],[[[38,[37]]],77],[48,33],[[47,-1],47,[[72,[34]]]],[[[38,[73]],-1],[[4,[[38,[52]],29]]],[55,56,57,58]],[29,[[10,[45]]]],[[[38,[37]]],[[38,[50]]]],0,[[[38,[37]]],[[4,[[19,[39]],20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,34,[]],[-1,34,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[[[74,[-1]],75],76,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,6],[22,6],[22,6],[22,6],[[73,26],[[4,[6,28]]]],[[52,26],[[4,[6,28]]]],[[37,26],[[4,[6,28]]]],[[50,26],[[4,[6,28]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,50],[[],22],[[],22],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"JsonCommitmentBuilder",2],[3,"CommitmentId",579],[4,"JsonCommitmentBuilderError",2],[4,"Result",580],[3,"JsonProofBuilder",2],[15,"tuple"],[4,"JsonProofBuilderError",2],[3,"HttpRequestCommitmentBuilder",2],[4,"BodyCommitmentBuilder",581],[4,"Option",582],[3,"HttpResponseCommitmentBuilder",2],[3,"HttpCommitmentBuilder",2],[4,"HttpCommitmentBuilderError",2],[3,"HttpProofBuilder",2],[3,"SubstringsProof",583],[4,"HttpProofBuilderError",2],[3,"JsonBody",2],[3,"Notarize",316],[3,"HttpProver",2],[4,"HttpProverError",2],[3,"Compat",584],[15,"usize"],[3,"NotarizedHttpSession",2],[8,"Deserializer",585],[15,"bool"],[3,"Formatter",586],[6,"Result",586],[3,"Error",586],[4,"ProverError",349],[4,"ParseError",587],[4,"TranscriptCommitmentBuilderError",588],[4,"SubstringsProofBuilderError",583],[15,"str"],[3,"String",589],[3,"Global",590],[3,"Vec",591],[3,"Closed",509],[3,"Prover",349],[3,"Closed",316],[3,"HttpRequestProofBuilder",592],[3,"HttpResponseProofBuilder",592],[8,"Serializer",593],[3,"NotarizedSession",594],[3,"SessionProof",595],[8,"Error",596],[3,"TypeId",597],[3,"ProverConfigBuilder",349],[3,"ProverConfig",349],[4,"ProverConfigBuilderError",349],[3,"Notarize",509],[3,"TranscriptCommitmentBuilder",588],[3,"Setup",509],[3,"TlsConnection",598],[3,"ProverFuture",349],[8,"AsyncWrite",599],[8,"AsyncRead",599],[8,"Send",600],[8,"Unpin",600],[8,"Debug",586],[8,"ProverState",509],[3,"UninitializedFieldError",601],[3,"Error",602],[4,"ConnectionError",603],[4,"SenderActorError",604],[4,"Error",605],[4,"ReceiverActorError",604],[3,"InvalidDnsNameError",606],[4,"MerkleError",607],[4,"MpcTlsError",608],[4,"MuxerError",609],[4,"OTError",610],[8,"Into",611],[3,"Initialized",509],[3,"Pin",612],[3,"Context",613],[4,"Poll",614],[3,"Transcript",615],[3,"RootCertStore",616]]},\
"tlsn_verifier":{"doc":"TLSNotary verifier library.","t":"ANNNNNDDDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["tls","IOError","MpcError","MuxerError","UninitializedField","ValidationError","Verifier","VerifierConfig","VerifierConfigBuilder","VerifierConfigBuilderError","VerifierError","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","id","id","init","init","init","init","init","into","into","into","into","into","max_transcript_size","max_transcript_size","new","notarize","notarize","run","setup","source","state","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Closed","Initialized","Setup","VerifierState","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"tlsn_verifier"],[1,"tlsn_verifier::tls"],[121,"tlsn_verifier::tls::state"],[172,"core::result"],[173,"utils_aio::executor"],[174,"core::fmt"],[175,"core::fmt"],[176,"alloc::string"],[177,"mpz_ot::actor::kos::error"],[178,"utils_aio::mux"],[179,"mpz_ot"],[180,"mpz_ot::actor::kos::error"],[181,"tls_mpc::error"],[182,"core::convert"],[183,"tlsn_core::session::header"],[184,"futures_io::if_std"],[185,"futures_io::if_std"],[186,"core::marker"],[187,"signature::signer"],[188,"core::error"],[189,"core::option"],[190,"core::any"],[191,"core::fmt"]],"d":["TLS Verifier","","","","Uninitialized field","Custom validation error","A Verifier instance.","Configuration for the <code>Verifier</code>","Builder for <code>VerifierConfig</code>.","Error type for VerifierConfigBuilder","An error that can occur during TLS verification.","","","","","","","","","","","Builds a new <code>VerifierConfig</code>.","Create a new configuration builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the ID of the notarization session.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the maximum transcript size in bytes.","Maximum transcript size in bytes","Create a new verifier.","Runs the TLS verifier to completion, notarizing the TLS …","Notarizes the TLS session.","Runs the verifier until the TLS connection is closed.","Set up the verifier.","","TLS Verifier state.","","","","","","","","","","","","","","","","","","","","","","","","","State after the TLS connection has been closed.","Initialized state.","State after MPC setup has completed.","TLS Verifier state.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,10,10,10,3,3,0,0,0,0,0,22,2,1,3,10,22,2,1,3,10,1,2,2,1,2,1,22,2,1,3,10,22,2,1,3,10,22,2,1,3,10,1,22,2,1,3,10,22,2,1,3,10,22,2,1,3,10,2,3,3,10,10,22,2,1,3,3,3,10,10,10,10,10,10,10,2,1,22,2,1,3,10,22,2,1,3,10,2,1,22,22,22,22,22,10,0,2,1,3,10,22,2,1,3,10,22,2,1,3,10,22,2,1,3,10,22,2,1,3,10,0,0,0,0,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30,21,31,30],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[2,3]]]],[[],1],[2,2],[1,1],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[],1],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,5],[7,5],[7,5],[7,5],[7,5],[[2,8],9],[[3,8],9],[[3,8],9],[[10,8],9],[[10,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,3],[12,3],[-1,-1,[]],[13,10],[14,10],[-1,-1,[]],[15,10],[16,10],[17,10],[18,10],[2,19],[[1,-1],1,[[20,[12]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,7],[[1,7],1],[2,[[22,[21]]]],[[[22,[21]],-1,-3],[[4,[23,10]]],[24,25,26,27],[[20,[28]]],[[29,[-2]]]],[[[22,[30]],-2],[[4,[23,10]]],[[20,[28]]],[[29,[-1]]]],[[[22,[31]]],[[4,[[22,[30]],10]]]],[[[22,[21]],-1],[[4,[[22,[31]],10]]],[24,25,26,27]],[10,[[33,[32]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,12,[]],[-1,12,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,5],[7,5],[7,5],[[21,8],[[4,[5,35]]]],[[30,8],[[4,[5,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"VerifierConfigBuilder",1],[3,"VerifierConfig",1],[4,"VerifierConfigBuilderError",1],[4,"Result",172],[15,"tuple"],[3,"Compat",173],[15,"usize"],[3,"Formatter",174],[6,"Result",174],[4,"VerifierError",1],[3,"UninitializedFieldError",175],[3,"String",176],[4,"SenderActorError",177],[4,"MuxerError",178],[4,"OTError",179],[4,"ReceiverActorError",177],[3,"Error",180],[4,"MpcTlsError",181],[15,"str"],[8,"Into",182],[3,"Initialized",121],[3,"Verifier",1],[3,"SessionHeader",183],[8,"AsyncWrite",184],[8,"AsyncRead",184],[8,"Send",185],[8,"Unpin",185],[4,"Signature",186],[8,"Signer",187],[3,"Closed",121],[3,"Setup",121],[8,"Error",188],[4,"Option",189],[3,"TypeId",190],[3,"Error",174]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
